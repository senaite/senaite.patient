name: build and test senaite.patient
on:
  - push
  - pull_request
env:
  PLONE_VERSION: "5.2"
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache pyenv Python builds
        uses: actions/cache@v4
        with:
          path: ~/.pyenv
          key: pyenv-2.7.18-${{ runner.os }}
          restore-keys: |
            pyenv-2.7.18-

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y make build-essential libssl-dev \
              zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
              wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev \
              libxmlsec1-dev libffi-dev liblzma-dev

      - name: Install pyenv
        run: |
          if [ ! -d "$HOME/.pyenv" ]; then
            curl https://pyenv.run | bash
          fi

      - name: Install Python 2.7 with pyenv (if not cached)
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
          pyenv install 2.7.18 || true  # Avoid reinstalling if already cached
          pyenv global 2.7.18

      - name: Verify Python Version
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
          python --version  # Should output Python 2.7.18

      - name: Cache eggs
        uses: actions/cache@v4
        with:
          key: eggs-cache-${{ hashFiles('buildout.cfg', 'requirements.txt') }}
          path: |
            eggs/

      - name: Install dependencies and setup virtualenv
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
          pip install virtualenv
          virtualenv -p `which python` .
          ./bin/pip install --upgrade pip
          ./bin/pip install -r requirements.txt
          ./bin/buildout -N -t 3 annotate
          ./bin/buildout -N -t 3
  
      - name: lint
        run: |
          ./bin/pip install flake8
          ./bin/flake8 --config ci_flake8.cfg src/senaite/

      - name: test
        run: |
          ./bin/test -s senaite.patient.tests
